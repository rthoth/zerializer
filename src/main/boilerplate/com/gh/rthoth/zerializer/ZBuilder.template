package com.gh.rthoth.zerializer

import com.gh.rthoth.zerializer.CZerializer.Field

class CBuilder[T] {

  def field[F](name: String)(implicit zerializer: Zerializer[F]): CBuilder1[T, F] = {
    new CBuilder1(Field(name, zerializer))
  }
}

[1..21#class CBuilder1[T, [#F1#]]([#f1: Field[F1]#]) {

  def field[F](name: String)(implicit zerializer: Zerializer[F]): CBuilder2[T, [#F1#], F] = {
    new CBuilder2([#f1#], Field(name, zerializer))
  }

  def mapTo(apply: ([#F1#]) => T, unapply: T => ([#F1#])): CZerializer[T] = {
    new CZerializer1([#f1#], apply, unapply)
  }
}#
]

class CBuilder22[T, [#F1#]]([#f1: Field[F1]#]) {

  def mapTo(apply: ([#F1#]) => T, unapply: T => ([#F1#])): CZerializer[T] = {
    new CZerializer22([#f1#], apply, unapply)
  }
}