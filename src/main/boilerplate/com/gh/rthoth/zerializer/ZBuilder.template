package com.gh.rthoth.zerializer

import ZBuilder.Field

object ZBuilder {

  case class Field[T](name: String, zerializer: Zerializer[T])
}

class ZBuilder[T] {

  def field[F](name: String)(implicit zerializer: Zerializer[F]): ZBuilder1[T, F] = {
    new ZBuilder1(Field(name, zerializer))
  }
}

[1..21#class ZBuilder1[T, [#F1#]]([#f1: Field[F1]#]) {

  def field[F](name: String)(implicit zerializer: Zerializer[F]): ZBuilder2[T, [#F1#], F] = {
    new ZBuilder2([#f1#], Field(name, zerializer))
  }

  def mapTo(apply: ([#F1#]) => Option[T], unapply: T => Option[([#F1#])]): Zerializer[T] = {
    ???
  }
}#
]

class ZBuilder22[T, [#F1#]]([#f1: Field[F1]#]) {

  def mapTo(apply: ([#F1#]) => Option[T], unapply: T => Option[([#F1#])]): Zerializer[T] = {
    ???
  }
}